{"version":3,"sources":["menu.js","helper.js","defaultPatterns.js","slider.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","display","justifyContent","alignContent","Load","props","classes","React","useState","patternName","setPattern","className","id","labelId","value","onChange","event","target","handleDropdownChange","patternExamples","map","pattern","i","key","name","Save","state","handleChange","bind","handleSubmit","this","setState","preventDefault","onClick","style","type","label","marginRight","disabled","variant","size","color","Component","Play","playOrPause","toPlay","Boolean","upgradeGrid","clearGrid","ResizeCells","noOfRows","handleBlur","e","parseInt","inputRows","resizeGrid","flexWrap","InputLabelProps","shrink","onBlur","Footer","flexDirection","href","rel","Header","fontSize","getNextState","j","n","grid","liveNeighbours","ctr","k","l","x","y","findLiveNeighbours","nextState","initialize2dArray","Array","from","length","fill","module","exports","nextGen","isSameAsPrevGen","fillPattern","cells","rows","columns","gridCenter","Math","floor","patternCenter","colStart","gridRowCtr","gridColCtr","data","getRandomCell","val","random","parseFloat","defaultPatternList","compressPattern","compPattern","filter","row","indexOf","leftMostNonEmptyCol","reduce","minIdx","curr","console","log","rightMostNonEmptyCol","lastIndexOf","maxIdx","undefined","table","cell","require","randomPatternSlider","randomPatternBtnAndRows","alignItems","RandomPattern","setValue","Typography","gutterBottom","Slider","defaultValue","newValue","valueLabelDisplay","aria-labelledby","min","max","width","Button","randomPattern","Cell","Grid","clearInterval","interval","handleCellClick","setInterval","generation","col","renderCell","Game","localStorage","getItem","JSON","parse","setItem","stringify","getNoOfRows","currentPattern","savePattern","fitGridToWindow","probOfLive","slice","customPattern","patternList","push","window","addEventListener","removeEventListener","maxnoOfRows","avlblWindowWidth","innerWidth","calcnoOfRows","inpNoOfRows","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2192d15d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"8rem\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Load(props) {\r\n  const classes = useStyles();\r\n  const [patternName, setPattern] = React.useState(props.patternName);\r\n\r\n  const handleChange = (event) => {\r\n    setPattern(event.target.value);\r\n    if (event.target.value !== \"\") {\r\n      props.handleDropdownChange(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl className={classes.formControl}>\r\n      <InputLabel id=\"pattern-select-label\">Load a pattern</InputLabel>\r\n      <Select\r\n        labelId=\"pattern-select-label\"\r\n        // style={{ margin: \"0.25rem\", minWidth: \"120px\" }}\r\n        value={patternName}\r\n        onChange={handleChange}\r\n      >\r\n        <MenuItem value=\"\">\r\n          <em>None</em>\r\n        </MenuItem>\r\n        {props.patternExamples.map((pattern, i) => (\r\n          <MenuItem key={i} value={i}>\r\n            {pattern.name}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nclass Save extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onClick(this.state.value);\r\n    this.setState({ value: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"saveForm\" style={{ margin: \"0.5rem 0.25rem\" }}>\r\n        <TextField\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          label=\"Save pattern\"\r\n          style={{ marginRight: \"0.25rem\" }}\r\n          onChange={this.handleChange}\r\n          disabled={this.props.disabled}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        />\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={this.props.disabled || !this.state.value}\r\n          onClick={this.handleSubmit}\r\n        >\r\n          Save\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Play(props) {\r\n  return (\r\n    <div className=\"playBar\">\r\n      <Button\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        // style={{ flex: 1, flexBasis: 0 }}\r\n        onClick={props.playOrPause}\r\n      >\r\n        {props.toPlay ? \"Pause\" : \"Play\"}\r\n      </Button>\r\n      <Button\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        // style={{ flex: 1, flexBasis: 0}}\r\n        disabled={Boolean(props.toPlay)}\r\n        onClick={props.upgradeGrid}\r\n      >\r\n        Next Gen\r\n      </Button>\r\n      <Button\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={props.clearGrid}\r\n      >\r\n        Clear grid\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass ResizeCells extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.noOfRows,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    const value = parseInt(e.target.value);\r\n    this.setState({ value });\r\n  }\r\n\r\n  handleBlur(e) {\r\n    const inputRows = parseInt(e.target.value);\r\n    this.setState({ value: inputRows });\r\n    if (inputRows && inputRows > 0) {\r\n      this.props.resizeGrid(inputRows);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"resize-cells\"\r\n        className=\"resize-cells\"\r\n        style={{\r\n          margin: \"0.5rem 0.25rem\",\r\n          alignContent: \"center\",\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n        }}\r\n      >\r\n        <TextField\r\n          type=\"number\"\r\n          label=\"No. of rows\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          onBlur={this.handleBlur}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <div\r\n      id=\"footer\"\r\n      className=\"footer\"\r\n      style={{ display: \"flex\", flexDirection: \"column\" }}\r\n    >\r\n      <span>\r\n        Source code:{\" \"}\r\n        <a\r\n          href=\"https://github.com/DharmikOO7/gameoflife\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Github\r\n        </a>\r\n      </span>\r\n      <span>\r\n        More Info:{\" \"}\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Wiki\r\n        </a>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div\r\n      id=\"header\"\r\n      className=\"header\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: \"center\",\r\n        margin: \"0.25rem\"\r\n        // justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <span style={{ fontSize: \"1.5rem\" }}>Conway's Game of Life</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Load, Save, Play, ResizeCells, Header, Footer };\r\n","const live = 1,\r\n  dead = 0;\r\nfunction findLiveNeighbours(i, j, grid, n) {\r\n  let ctr = 0;\r\n  // let size=n-1;\r\n  for (let k = -1; k < 2; k++) {\r\n    for (let l = -1; l < 2; l++) {\r\n      // if (grid[i + k] && grid[i + k][j + l]) {\r\n      let x = (i + k) % n;\r\n      let y = (j + l) % n;\r\n      // console.log(i,j);\r\n      // console.log(x,y);\r\n      if (x < 0) {\r\n        // console.log(x);\r\n        x = n + x;\r\n        // console.log(x);\r\n      }\r\n      if (y < 0) {\r\n        y = n + y;\r\n        // console.log(y);\r\n      }\r\n      // console.log(grid);\r\n      ctr += grid[x][y];\r\n      // }\r\n    }\r\n  }\r\n  ctr -= grid[i][j];\r\n  return ctr;\r\n}\r\n\r\nfunction getNextState(i, j, n, grid) {\r\n  let liveNeighbours = findLiveNeighbours(i, j, grid, n);\r\n  let nextState = grid[i][j];\r\n  if (grid[i][j] === live) {\r\n    if (liveNeighbours < 2) {\r\n      //underpopulation\r\n      nextState = dead;\r\n    } else if (liveNeighbours === 2 || liveNeighbours === 3) {\r\n      //lives to next gen\r\n      nextState = live;\r\n    } else if (liveNeighbours > 3) {\r\n      //overpopulation\r\n      nextState = dead;\r\n    }\r\n  } else {\r\n    if (liveNeighbours === 3) {\r\n      //reproduction\r\n      nextState = live;\r\n    }\r\n  }\r\n  // nextState = liveNeighbours\r\n  return nextState;\r\n}\r\n\r\nfunction nextGen(n, grid) {\r\n  let nextGen = initialize2dArray(n);\r\n  let isSameAsPrevGen = true;\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n; j++) {\r\n      nextGen[i][j] = getNextState(i, j, n, grid);\r\n      if (isSameAsPrevGen && nextGen[i][j] !== grid[i][j]) {\r\n        isSameAsPrevGen = false;\r\n      }\r\n    }\r\n  }\r\n  return [nextGen, isSameAsPrevGen];\r\n}\r\n\r\nfunction fillPattern(noOfRows, pattern) {\r\n  let cells = initialize2dArray(noOfRows);\r\n  if (!pattern || pattern.rows > noOfRows || pattern.columns > noOfRows) {\r\n    return cells;\r\n  }\r\n  const gridCenter = [Math.floor(noOfRows / 2), Math.floor(noOfRows / 2)];\r\n  const patternCenter = [\r\n    Math.floor(pattern.rows / 2),\r\n    Math.floor(pattern.columns / 2),\r\n  ];\r\n  const [rowStart, colStart] = [\r\n    gridCenter[0] - patternCenter[0],\r\n    gridCenter[1] - patternCenter[1],\r\n  ];\r\n  // console.log(\"rowStart, colStart\", rowStart, colStart);\r\n  for (let i = 0, gridRowCtr = rowStart; i < pattern.rows; i++, gridRowCtr++) {\r\n    for (\r\n      let j = 0, gridColCtr = colStart;\r\n      j < pattern.columns;\r\n      j++, gridColCtr++\r\n    ) {\r\n      cells[gridRowCtr][gridColCtr] = pattern.data[i][j];\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction initialize2dArray(n) {\r\n  return Array.from({length: n}, e => Array(n).fill(0));;\r\n}\r\n\r\nfunction getRandomInt(val) {\r\n  const rand = Math.random();\r\n  if (rand < parseFloat(val)) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n  // return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nmodule.exports = {\r\n  initialize2dArray,\r\n  nextGen,\r\n  fillPattern,\r\n  getRandomCell: getRandomInt,\r\n};\r\n","let compressPattern = (cells) => {\r\n  //remove all rows with only 0s(dead)\r\n  let compPattern = cells.filter((row) => row.indexOf(1) !== -1);\r\n  const leftMostNonEmptyCol = compPattern\r\n    .map((row) => row.indexOf(1))\r\n    .reduce(\r\n      (minIdx, curr) => (minIdx > curr ? curr : minIdx),\r\n      compPattern[0].length - 1\r\n    );\r\n  console.log(\"leftMostNonEmptyCol\", leftMostNonEmptyCol);\r\n  const rightMostNonEmptyCol = compPattern\r\n    .map((row) => row.lastIndexOf(1))\r\n    .reduce((maxIdx, curr) => (maxIdx < curr ? curr : maxIdx), 0);\r\n  console.log(\"rightMostNonEmptyCol\", rightMostNonEmptyCol);\r\n  //Set all values as undefined in columns containing only 0s(dead)\r\n  for (let j = 0; j < leftMostNonEmptyCol; j++) {\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      compPattern[i][j] = undefined;\r\n    }\r\n  }\r\n  for (let j = rightMostNonEmptyCol + 1; j < compPattern[0].length; j++) {\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      compPattern[i][j] = undefined;\r\n    }\r\n  }\r\n  console.table(compPattern);\r\n  /* for (let j = 0; j < compPattern[0].length; j++) {\r\n    let isOnlyZeroes = true;\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      if (compPattern[i][j] === 1) {\r\n        isOnlyZeroes = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isOnlyZeroes) {\r\n      for (let i = 0; i < compPattern.length; i++) {\r\n        compPattern[i][j] = undefined;\r\n      }\r\n    }\r\n  } */\r\n\r\n  compPattern = compPattern.map((row) =>\r\n    row.filter((cell) => cell === 0 || cell === 1)\r\n  );\r\n  console.table(compPattern);\r\n  return compPattern;\r\n};\r\n\r\nlet defaultPatternList = [\r\n  {\r\n    name: \"Glider\",\r\n    rows: 3,\r\n    columns: 3,\r\n    data: [\r\n      [0, 1, 0],\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n  },\r\n  {\r\n    name: \"Blinker\",\r\n    rows: 1,\r\n    columns: 3,\r\n    data: [[1, 1, 1]],\r\n  },\r\n  {\r\n    name: \"Beacon\",\r\n    rows: 4,\r\n    columns: 4,\r\n    data: [\r\n      [1, 1, 0, 0],\r\n      [1, 1, 0, 0],\r\n      [0, 0, 1, 1],\r\n      [0, 0, 1, 1],\r\n    ],\r\n  },\r\n  {\r\n    name: \"R-pentomino\",\r\n    rows: 3,\r\n    columns: 3,\r\n    data: [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  },\r\n];\r\n\r\nmodule.exports = {\r\n  defaultPatternList,\r\n  compressPattern,\r\n};\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst { ResizeCells } = require(\"./menu\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  randomPatternSlider: {\r\n    margin: \"0.5rem 0.25rem\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    // justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n  randomPatternBtnAndRows: {\r\n    margin: \"0.5rem 0.25rem\",\r\n    display: \"flex\",\r\n    // flexWrap: \"wrap\",\r\n    flexDirection: \"row\",\r\n    // justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function RandomPattern(props) {\r\n  const [value, setValue] = React.useState(50);\r\n  const classes = useStyles();\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    props.randomPattern(value / 100);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.randomPatternSlider}>\r\n      <div>\r\n        <Typography id=\"continuous-slider\" gutterBottom>\r\n          Probability({value}%) of live cell\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={50}\r\n          value={value}\r\n          onChange={handleChange}\r\n          valueLabelDisplay=\"auto\"\r\n          // getAriaValueText={valuetext}\r\n          aria-labelledby=\"continuous-slider\"\r\n          min={0}\r\n          max={100}\r\n          style={{ width: \"29ch\", margin: \"0 0.5rem\" }}\r\n        />\r\n      </div>\r\n      <div className={classes.randomPatternBtnAndRows}>\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n        >\r\n          Random pattern\r\n        </Button>\r\n        <ResizeCells\r\n          key={props.noOfRows}\r\n          resizeGrid={props.resizeGrid}\r\n          noOfRows={props.noOfRows}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RandomPattern from \"./slider\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nconst { nextGen, fillPattern, getRandomCell } = require(\"./helper\");\r\nconst { defaultPatternList, compressPattern } = require(\"./defaultPatterns\");\r\nconst { Load, Save, Play, Header, Footer } = require(\"./menu\");\r\n\r\nfunction Cell(props) {\r\n  return (\r\n    <td className={`cell ${props.className}`} onClick={props.onClick}></td>\r\n  );\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    console.log(\"Grid contructor again\");\r\n    super(props);\r\n    /* this.state = {\r\n      cells: props.cells,\r\n    }; */\r\n  }\r\n\r\n  /* static getDerivedStateFromProps(props, state) {\r\n    // console.log(\"getDerivedStateFromProps\");\r\n    if (props.currentPattern !== state.currentPattern) {\r\n      return {\r\n        noOfRows: props.noOfRows,\r\n        currentPattern: props.currentPattern,\r\n        cells: props.cells,\r\n        toPlay: false,\r\n      };\r\n    }\r\n\r\n    // Return null to indicate no change to state.\r\n    return null;\r\n  } */\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"grid unmounted\");\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  renderCell(i, j) {\r\n    return (\r\n      <Cell\r\n        key={i * this.props.noOfRows + j}\r\n        value={this.props.cells[i][j]}\r\n        onClick={() => this.props.handleCellClick(i, j)}\r\n        className={this.props.cells[i][j] ? \"live\" : \"dead\"}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.props.toPlay) {\r\n      clearInterval(this.interval);\r\n      this.interval = setInterval(\r\n        () => this.props.upgradeGrid(),\r\n        this.props.interval * 1000\r\n      );\r\n    } else {\r\n      clearInterval(this.interval);\r\n    }\r\n    return (\r\n      <div>\r\n        Generation #{this.props.generation}\r\n        <table className=\"holder\">\r\n          <tbody>\r\n            {this.props.cells.map((row, i) => {\r\n              return (\r\n                <tr className=\"grid-row\" key={i}>\r\n                  {row.map((col, j) => this.renderCell(i, j))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let patternExamples = localStorage.getItem(\"patternList\");\r\n    if (patternExamples) {\r\n      patternExamples = JSON.parse(patternExamples);\r\n    } else {\r\n      patternExamples = defaultPatternList;\r\n      localStorage.setItem(\"patternList\", JSON.stringify(patternExamples));\r\n    }\r\n    const noOfRows = this.getNoOfRows();\r\n    this.state = {\r\n      noOfRows,\r\n      currentPattern: null,\r\n    };\r\n    this.state = {\r\n      patternExamples,\r\n      currentPattern: null,\r\n      noOfRows: this.state.noOfRows,\r\n      cells: fillPattern(this.state.noOfRows, this.state.currentPattern),\r\n      toPlay: false,\r\n      interval: 0.5,\r\n      generation: 0,\r\n    };\r\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\r\n    this.playOrPause = this.playOrPause.bind(this);\r\n    this.handleCellClick = this.handleCellClick.bind(this);\r\n    this.upgradeGrid = this.upgradeGrid.bind(this);\r\n    this.savePattern = this.savePattern.bind(this);\r\n    this.randomPattern = this.randomPattern.bind(this);\r\n    this.clearGrid = this.clearGrid.bind(this);\r\n    this.fitGridToWindow = this.fitGridToWindow.bind(this);\r\n    this.resizeGrid = this.resizeGrid.bind(this);\r\n  }\r\n\r\n  clearGrid() {\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells: fillPattern(state.noOfRows, null),\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  randomPattern(probOfLive) {\r\n    const cells = this.state.cells.slice();\r\n    for (let i = 0; i < cells.length; i++) {\r\n      for (let j = 0; j < cells[i].length; j++) {\r\n        cells[i][j] = getRandomCell(probOfLive);\r\n      }\r\n    }\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells,\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  savePattern(patternName) {\r\n    const cells = this.state.cells.slice();\r\n    let compPattern = compressPattern(cells);\r\n    const customPattern = {\r\n      name: patternName,\r\n      rows: compPattern.length,\r\n      columns: compPattern[0].length,\r\n      data: compPattern,\r\n    };\r\n    let patternList = JSON.parse(localStorage.getItem(\"patternList\"));\r\n    patternList.push(customPattern);\r\n    localStorage.setItem(\"patternList\", JSON.stringify(patternList));\r\n    this.setState((state) => ({\r\n      patternExamples: patternList,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells: state.cells,\r\n      toPlay: state.toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation,\r\n    }));\r\n  }\r\n\r\n  upgradeGrid() {\r\n    const [cells, isSameAsPrevGen] = nextGen(\r\n      this.state.noOfRows,\r\n      this.state.cells\r\n    );\r\n    let toPlay = this.state.toPlay;\r\n    if (isSameAsPrevGen) {\r\n      toPlay = false;\r\n    }\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells,\r\n      toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation + 1,\r\n    }));\r\n  }\r\n\r\n  handleCellClick(i, j) {\r\n    const cells = this.state.cells.slice();\r\n    cells[i][j] = 1 - cells[i][j];\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells,\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  handleDropdownChange(event) {\r\n    const currentPattern = JSON.parse(\r\n      JSON.stringify(this.state.patternExamples[event.target.value])\r\n    );\r\n    this.setState({\r\n      patternExamples: this.state.patternExamples,\r\n      currentPattern,\r\n      noOfRows: this.state.noOfRows,\r\n      cells: fillPattern(this.state.noOfRows, currentPattern),\r\n      toPlay: false,\r\n      interval: this.state.interval,\r\n      generation: 0,\r\n    });\r\n  }\r\n\r\n  playOrPause(event) {\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfRows: state.noOfRows,\r\n      cells: state.cells,\r\n      toPlay: !state.toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <Header />\r\n        <div className=\"menu\">\r\n          <div className=\"topBar\" style={{ margin: \"0.25rem\" }}>\r\n            <Load\r\n              patternName={\"\"}\r\n              handleDropdownChange={this.handleDropdownChange}\r\n              patternExamples={this.state.patternExamples}\r\n            />\r\n            <Play\r\n              playOrPause={this.playOrPause}\r\n              toPlay={this.state.toPlay}\r\n              upgradeGrid={this.upgradeGrid}\r\n              clearGrid={this.clearGrid}\r\n            />\r\n          </div>\r\n          <Save disabled={this.state.toPlay} onClick={this.savePattern} />\r\n          <RandomPattern\r\n            randomPattern={this.randomPattern}\r\n            key={this.state.noOfRows}\r\n            resizeGrid={this.resizeGrid}\r\n            noOfRows={this.state.noOfRows}\r\n          />\r\n        </div>\r\n        <div id=\"game-grid\" className=\"game-grid\">\r\n          <Grid\r\n            currentPattern={this.state.currentPattern}\r\n            noOfRows={this.state.noOfRows}\r\n            cells={this.state.cells}\r\n            toPlay={this.state.toPlay}\r\n            handleCellClick={this.handleCellClick}\r\n            upgradeGrid={this.upgradeGrid}\r\n            interval={this.state.interval}\r\n            generation={this.state.generation}\r\n          />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fitGridToWindow();\r\n    window.addEventListener(\"resize\", this.fitGridToWindow);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.fitGridToWindow);\r\n  }\r\n\r\n  fitGridToWindow() {\r\n    const noOfRows = this.getNoOfRows();\r\n    if (noOfRows !== this.state.noOfRows) {\r\n      this.resizeGrid(noOfRows);\r\n    }\r\n  }\r\n\r\n  getNoOfRows(maxnoOfRows = 25) {\r\n    //39.552px are subtracted due to margin\r\n    const avlblWindowWidth = window.innerWidth - 39.552;\r\n    // let maxnoOfRows = 25;\r\n    //20px is width of a cell\r\n    let calcnoOfRows = Math.floor(avlblWindowWidth / 20) - 1;\r\n    const noOfRows = Math.min(maxnoOfRows, calcnoOfRows);\r\n    return noOfRows;\r\n  }\r\n\r\n  resizeGrid(inpNoOfRows) {\r\n    const noOfRows = this.getNoOfRows(inpNoOfRows);\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: null,\r\n      noOfRows,\r\n      cells: fillPattern(noOfRows, state.currentPattern),\r\n      toPlay: false,\r\n      interval: 0.5,\r\n      generation: 0,\r\n    }));\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}