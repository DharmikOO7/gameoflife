{"version":3,"sources":["helper.js","defaultPatterns.js","slider.js","index.js"],"names":["getNextState","i","j","n","grid","liveNeighbours","ctr","k","l","x","y","findLiveNeighbours","nextState","initialize2dArray","a","Array","fill","module","exports","nextGen","isSameAsPrevGen","fillPattern","noOfCells","pattern","cells","rows","columns","gridCenter","Math","floor","patternCenter","colStart","gridRowCtr","gridColCtr","data","getRandomCell","val","random","parseFloat","defaultPatternList","name","compressPattern","compPattern","filter","row","indexOf","leftMostNonEmptyCol","map","reduce","minIdx","curr","length","console","log","rightMostNonEmptyCol","lastIndexOf","maxIdx","undefined","table","cell","RandomPattern","props","React","useState","value","setValue","Typography","id","gutterBottom","Slider","defaultValue","onChange","event","newValue","valueLabelDisplay","aria-labelledby","min","max","style","float","onClick","preventDefault","randomPattern","require","Cell","className","Grid","clearInterval","this","interval","key","handleCellClick","toPlay","setInterval","upgradeGrid","generation","col","renderCell","Component","Game","patternExamples","localStorage","getItem","JSON","parse","setItem","stringify","state","currentPattern","handleDropdownChange","bind","playOrPause","savePattern","clearGrid","setState","probOfLive","slice","patternName","customPattern","patternList","push","target","disabled","Load","Save","handleChange","handleSubmit","onSubmit","type","placeholder","ReactDOM","render","document","getElementById"],"mappings":"mJA8BA,SAASA,EAAaC,EAAGC,EAAGC,EAAGC,GAC7B,IAAIC,EA7BN,SAA4BJ,EAAGC,EAAGE,EAAMD,GAGtC,IAFA,IAAIG,EAAM,EAEDC,GAAK,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IAAK,CAE3B,IAAIC,GAAKR,EAAIM,GAAKJ,EACdO,GAAKR,EAAIM,GAAKL,EAGdM,EAAI,IAENA,EAAIN,EAAIM,GAGNC,EAAI,IACNA,EAAIP,EAAIO,GAIVJ,GAAOF,EAAKK,GAAGC,GAKnB,OADAJ,GAAOF,EAAKH,GAAGC,GAKMS,CAAmBV,EAAGC,EAAGE,EAAMD,GAChDS,EAAYR,EAAKH,GAAGC,GAmBxB,OAnDW,IAiCPE,EAAKH,GAAGC,GACNG,EAAiB,EAEnBO,EAnCG,EAoCyB,IAAnBP,GAA2C,IAAnBA,EAEjCO,EAvCO,EAwCEP,EAAiB,IAE1BO,EAzCG,GA4CkB,IAAnBP,IAEFO,EA/CO,GAmDJA,EA4CT,SAASC,EAAkBV,GAEzB,IADA,IAAIW,EAAI,IAAIC,MAAMZ,GACTF,EAAI,EAAGA,EAAIE,EAAGF,IACrBa,EAAEb,GAAKc,MAAMZ,GAAGa,KAAK,GAEvB,OAAOF,EAaTG,EAAOC,QAAU,CACfL,oBACAM,QA7DF,SAAiBhB,EAAGC,GAGlB,IAFA,IAAIe,EAAUN,EAAkBV,GAC5BiB,GAAkB,EACbnB,EAAI,EAAGA,EAAIE,EAAGF,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAGD,IACrBiB,EAAQlB,GAAGC,GAAKF,EAAaC,EAAGC,EAAGC,EAAGC,GAClCgB,GAAmBD,EAAQlB,GAAGC,KAAOE,EAAKH,GAAGC,KAC/CkB,GAAkB,GAIxB,MAAO,CAACD,EAASC,IAmDjBC,YAhDF,SAAqBC,EAAWC,GAC9B,IAAIC,EAAQX,EAAkBS,GAC9B,IAAKC,GAAWA,EAAQE,KAAOH,GAAaC,EAAQG,QAAUJ,EAC5D,OAAOE,EAYT,IAVA,IAAMG,EAAa,CAACC,KAAKC,MAAMP,EAAY,GAAIM,KAAKC,MAAMP,EAAY,IAChEQ,EAAgB,CACpBF,KAAKC,MAAMN,EAAQE,KAAO,GAC1BG,KAAKC,MAAMN,EAAQG,QAAU,IAEdK,EAEfJ,EAAW,GAAKG,EAAc,GAGvB7B,EAAI,EAAG+B,EAJdL,EAAW,GAAKG,EAAc,GAIO7B,EAAIsB,EAAQE,KAAMxB,IAAK+B,IAC5D,IACE,IAAI9B,EAAI,EAAG+B,EAAaF,EACxB7B,EAAIqB,EAAQG,QACZxB,IAAK+B,IAELT,EAAMQ,GAAYC,GAAcV,EAAQW,KAAKjC,GAAGC,GAGpD,OAAOsB,GAyBPW,cAdF,SAAsBC,GAEpB,OADaR,KAAKS,SACPC,WAAWF,GACb,EAEA,K,iBC9BXnB,EAAOC,QAAU,CACfqB,mBA/BuB,CACvB,CACEC,KAAM,SACNf,KAAM,EACNC,QAAS,EACTQ,KAAM,CACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGX,CACEM,KAAM,UACNf,KAAM,EACNC,QAAS,EACTQ,KAAM,CAAC,CAAC,EAAG,EAAG,KAEhB,CACEM,KAAM,SACNf,KAAM,EACNC,QAAS,EACTQ,KAAM,CACJ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,MAOdO,gBAhFoB,SAACjB,GAErB,IAAIkB,EAAclB,EAAMmB,QAAO,SAACC,GAAD,OAA6B,IAApBA,EAAIC,QAAQ,MAC9CC,EAAsBJ,EACzBK,KAAI,SAACH,GAAD,OAASA,EAAIC,QAAQ,MACzBG,QACC,SAACC,EAAQC,GAAT,OAAmBD,EAASC,EAAOA,EAAOD,IAC1CP,EAAY,GAAGS,OAAS,GAE5BC,QAAQC,IAAI,sBAAuBP,GACnC,IAAMQ,EAAuBZ,EAC1BK,KAAI,SAACH,GAAD,OAASA,EAAIW,YAAY,MAC7BP,QAAO,SAACQ,EAAQN,GAAT,OAAmBM,EAASN,EAAOA,EAAOM,IAAS,GAC7DJ,QAAQC,IAAI,uBAAwBC,GAEpC,IAAK,IAAIpD,EAAI,EAAGA,EAAI4C,EAAqB5C,IACvC,IAAK,IAAID,EAAI,EAAGA,EAAIyC,EAAYS,OAAQlD,IACtCyC,EAAYzC,GAAGC,QAAKuD,EAGxB,IAAK,IAAIvD,EAAIoD,EAAuB,EAAGpD,EAAIwC,EAAY,GAAGS,OAAQjD,IAChE,IAAK,IAAID,EAAI,EAAGA,EAAIyC,EAAYS,OAAQlD,IACtCyC,EAAYzC,GAAGC,QAAKuD,EAuBxB,OApBAL,QAAQM,MAAMhB,GAgBdA,EAAcA,EAAYK,KAAI,SAACH,GAAD,OAC5BA,EAAID,QAAO,SAACgB,GAAD,OAAmB,IAATA,GAAuB,IAATA,QAErCP,QAAQM,MAAMhB,GACPA,K,0HCzCM,SAASkB,EAAcC,GAAQ,IAAD,EACjBC,IAAMC,SAAS,IADE,mBACpCC,EADoC,KAC7BC,EAD6B,KAY3C,OACE,6BACE,kBAACC,EAAA,EAAD,CAAYC,GAAG,oBAAoBC,cAAY,GAA/C,eACeJ,EADf,mBAGA,kBAACK,EAAA,EAAD,CACEC,aAAc,GACdN,MAAOA,EACPO,SAjBe,SAACC,EAAOC,GAC3BR,EAASQ,IAiBLC,kBAAkB,OAElBC,kBAAgB,oBAChBC,IAAK,EACLC,IAAK,MAEP,4BAAQC,MAAO,CAAEC,MAAO,QAAUC,QApBtC,SAAsBR,GACpBA,EAAMS,iBACNpB,EAAMqB,cAAclB,EAAQ,OAkB1B,mB,8BC3B0CmB,EAAQ,KAAhDhE,E,EAAAA,QAASE,E,EAAAA,YAAac,E,EAAAA,c,EACkBgD,EAAQ,IAAhD5C,E,EAAAA,mBAAoBE,E,EAAAA,gBAE5B,SAAS2C,EAAKvB,GACZ,OACE,wBAAIwB,UAAS,eAAUxB,EAAMwB,WAAaL,QAASnB,EAAMmB,SACtDnB,EAAM5D,EADT,IACa4D,EAAM3D,G,IAKjBoF,E,kDACJ,WAAYzB,GAAO,OAAC,oBAClBT,QAAQC,IAAI,yBADK,YAEXQ,G,mEAsBNT,QAAQC,IAAI,kBACZkC,cAAcC,KAAKC,Y,iCAGVxF,EAAGC,GAAI,IAAD,OACf,OACE,kBAACkF,EAAD,CACEM,IAAKzF,EAAIuF,KAAK3B,MAAMvC,UAAYpB,EAChC8D,MAAOwB,KAAK3B,MAAMrC,MAAMvB,GAAGC,GAC3BD,EAAGA,EACHC,EAAGA,EACH8E,QAAS,kBAAM,EAAKnB,MAAM8B,gBAAgB1F,EAAGC,IAC7CmF,UAAWG,KAAK3B,MAAMrC,MAAMvB,GAAGC,GAAK,OAAS,W,+BAKzC,IAAD,OAUP,OATIsF,KAAK3B,MAAM+B,QACbL,cAAcC,KAAKC,UACnBD,KAAKC,SAAWI,aACd,kBAAM,EAAKhC,MAAMiC,gBACK,IAAtBN,KAAK3B,MAAM4B,WAGbF,cAAcC,KAAKC,UAGnB,4CACeD,KAAK3B,MAAMkC,WACxB,2BAAOV,UAAU,UACf,+BACGG,KAAK3B,MAAMrC,MAAMuB,KAAI,SAACH,EAAK3C,GAC1B,OACE,wBAAIoF,UAAU,WAAWK,IAAKzF,GAC3B2C,EAAIG,KAAI,SAACiD,EAAK9F,GAAN,OAAY,EAAK+F,WAAWhG,EAAGC,iB,GA5DvC4D,IAAMoC,WAuEnBC,E,kDACJ,WAAYtC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIuC,EAAkBC,aAAaC,QAAQ,eAF1B,OAGbF,EACFA,EAAkBG,KAAKC,MAAMJ,IAE7BA,EAAkB7D,EAClB8D,aAAaI,QAAQ,cAAeF,KAAKG,UAAUN,KAErD,EAAKO,MAAQ,CACXrF,UAAW,GACXsF,eAAgB,MAElB,EAAKD,MAAQ,CACXP,kBACAQ,eAAgB,KAChBtF,UAAW,EAAKqF,MAAMrF,UACtBE,MAAOH,EAAY,EAAKsF,MAAMrF,UAAW,EAAKqF,MAAMC,gBACpDhB,OAAQ,EACRH,SAAU,GACVM,WAAY,GAEd,EAAKc,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKnB,gBAAkB,EAAKA,gBAAgBmB,KAArB,gBACvB,EAAKhB,YAAc,EAAKA,YAAYgB,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAK5B,cAAgB,EAAKA,cAAc4B,KAAnB,gBACrB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBA5BA,E,wDAgCjBtB,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBO,EAAMP,gBACvBQ,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,MAAOH,EAAYsF,EAAMrF,UAAW,MACpCsE,QAAQ,EACRH,SAAUkB,EAAMlB,SAChBM,WAAY,Q,oCAIFoB,GAEZ,IADA,IAAM3F,EAAQgE,KAAKmB,MAAMnF,MAAM4F,QACtBnH,EAAI,EAAGA,EAAIuB,EAAM2B,OAAQlD,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIsB,EAAMvB,GAAGkD,OAAQjD,IACnCsB,EAAMvB,GAAGC,GAAKiC,EAAcgF,GAGhC3B,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBO,EAAMP,gBACvBQ,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,QACAoE,QAAQ,EACRH,SAAUkB,EAAMlB,SAChBM,WAAY,Q,kCAIJsB,GACV,IAAM7F,EAAQgE,KAAKmB,MAAMnF,MAAM4F,QAC3B1E,EAAcD,EAAgBjB,GAC5B8F,EAAgB,CACpB9E,KAAM6E,EACN5F,KAAMiB,EAAYS,OAClBzB,QAASgB,EAAY,GAAGS,OACxBjB,KAAMQ,GAEJ6E,EAAchB,KAAKC,MAAMH,aAAaC,QAAQ,gBAClDiB,EAAYC,KAAKF,GACjBjB,aAAaI,QAAQ,cAAeF,KAAKG,UAAUa,IACnD/B,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBmB,EACjBX,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,MAAOmF,EAAMnF,MACboE,OAAQe,EAAMf,OACdH,SAAUkB,EAAMlB,SAChBM,WAAYY,EAAMZ,iB,oCAIP,IAAD,EACqB5E,EAC/BqE,KAAKmB,MAAMrF,UACXkE,KAAKmB,MAAMnF,OAHD,mBACLA,EADK,KACEJ,EADF,KAKRwE,EAASJ,KAAKmB,MAAMf,OACpBxE,IACFwE,GAAS,GAEXJ,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBO,EAAMP,gBACvBQ,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,QACAoE,SACAH,SAAUkB,EAAMlB,SAChBM,WAAYY,EAAMZ,WAAa,Q,sCAInB9F,EAAGC,GACjB,IAAMsB,EAAQgE,KAAKmB,MAAMnF,MAAM4F,QAC/B5F,EAAMvB,GAAGC,GAAK,EAAIsB,EAAMvB,GAAGC,GAC3BsF,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBO,EAAMP,gBACvBQ,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,QACAoE,QAAQ,EACRH,SAAUkB,EAAMlB,SAChBM,WAAY,Q,2CAIKvB,GACnB,IAAMoC,EAAiBL,KAAKC,MAC1BD,KAAKG,UAAUlB,KAAKmB,MAAMP,gBAAgB5B,EAAMiD,OAAOzD,SAEzDwB,KAAK0B,SAAS,CACZd,gBAAiBZ,KAAKmB,MAAMP,gBAC5BQ,iBACAtF,UAAWkE,KAAKmB,MAAMrF,UACtBE,MAAOH,EAAYmE,KAAKmB,MAAMrF,UAAWsF,GACzChB,QAAQ,EACRH,SAAUD,KAAKmB,MAAMlB,SACrBM,WAAY,M,kCAIJvB,GACVgB,KAAK0B,UAAS,SAACP,GAAD,MAAY,CACxBP,gBAAiBO,EAAMP,gBACvBQ,eAAgBD,EAAMC,eACtBtF,UAAWqF,EAAMrF,UACjBE,MAAOmF,EAAMnF,MACboE,QAASe,EAAMf,OACfH,SAAUkB,EAAMlB,SAChBM,WAAYY,EAAMZ,iB,+BAKpB,OACE,yBAAKV,UAAU,QACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CACEwB,qBAAsBrB,KAAKqB,qBAC3BT,gBAAiBZ,KAAKmB,MAAMP,kBAE9B,6BACA,4BAAQtB,MAAO,CAAEC,MAAO,QAAUC,QAASQ,KAAKuB,aAC7CvB,KAAKmB,MAAMf,OAAS,QAAU,QAEjC,6BACA,kBAAC,EAAD,CAAM8B,SAAUlC,KAAKmB,MAAMf,OAAQZ,QAASQ,KAAKwB,cACjD,6BACA,kBAACpD,EAAD,CAAesB,cAAeM,KAAKN,gBACnC,6BACA,4BAAQF,QAASQ,KAAKyB,WAAtB,eAEF,yBAAK5B,UAAU,YAAYP,MAAO,CAAEC,MAAO,UACzC,kBAAC,EAAD,CACE6B,eAAgBpB,KAAKmB,MAAMC,eAC3BtF,UAAWkE,KAAKmB,MAAMrF,UACtBE,MAAOgE,KAAKmB,MAAMnF,MAClBoE,OAAQJ,KAAKmB,MAAMf,OACnBD,gBAAiBH,KAAKG,gBACtBG,YAAaN,KAAKM,YAClBL,SAAUD,KAAKmB,MAAMlB,SACrBM,WAAYP,KAAKmB,MAAMZ,mB,GA9KhBjC,IAAMoC,WAsLnByB,E,uKAEF,OACE,oDACoB,6BAClB,4BAAQrD,cAAY,EAACC,SAAUiB,KAAK3B,MAAMgD,sBACxC,4BAAQa,UAAQ,EAAC1D,OAAK,GAAtB,kBAGCwB,KAAK3B,MAAMuC,gBAAgBrD,KAAI,SAACxB,EAAStB,GAAV,OAC9B,4BAAQyF,IAAKzF,EAAG+D,MAAO/D,GACpBsB,EAAQiB,e,GAXJsB,IAAMoC,WAoBnB0B,E,kDACJ,WAAY/D,GAAQ,IAAD,8BACjB,cAAMA,IACD8C,MAAQ,CAAE3C,MAAO,IACtB,EAAK6D,aAAe,EAAKA,aAAaf,KAAlB,gBACpB,EAAKgB,aAAe,EAAKA,aAAahB,KAAlB,gBAJH,E,yDAONtC,GACXgB,KAAK0B,SAAS,CAAElD,MAAOQ,EAAMiD,OAAOzD,U,mCAGzBQ,GACXA,EAAMS,iBACNO,KAAK3B,MAAMmB,QAAQQ,KAAKmB,MAAM3C,OAC9BwB,KAAK0B,SAAS,CAAElD,MAAO,O,+BAGvB,OACE,0BAAM+D,SAAUvC,KAAKsC,cACnB,2DAEE,6BACA,2BACEE,KAAK,OACLhE,MAAOwB,KAAKmB,MAAM3C,MAClBiE,YAAY,eACZ1D,SAAUiB,KAAKqC,aACfH,SAAUlC,KAAK3B,MAAM6D,WAEvB,4BAAQA,SAAUlC,KAAK3B,MAAM6D,WAAalC,KAAKmB,MAAM3C,OAArD,c,GA9BSF,IAAMoC,WAyCzBgC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.3c87f4a4.chunk.js","sourcesContent":["const live = 1,\r\n  dead = 0;\r\nfunction findLiveNeighbours(i, j, grid, n) {\r\n  let ctr = 0;\r\n  // let size=n-1;\r\n  for (let k = -1; k < 2; k++) {\r\n    for (let l = -1; l < 2; l++) {\r\n      // if (grid[i + k] && grid[i + k][j + l]) {\r\n      let x = (i + k) % n;\r\n      let y = (j + l) % n;\r\n      // console.log(i,j);\r\n      // console.log(x,y);\r\n      if (x < 0) {\r\n        // console.log(x);\r\n        x = n + x;\r\n        // console.log(x);\r\n      }\r\n      if (y < 0) {\r\n        y = n + y;\r\n        // console.log(y);\r\n      }\r\n      // console.log(grid);\r\n      ctr += grid[x][y];\r\n      // }\r\n    }\r\n  }\r\n  ctr -= grid[i][j];\r\n  return ctr;\r\n}\r\n\r\nfunction getNextState(i, j, n, grid) {\r\n  let liveNeighbours = findLiveNeighbours(i, j, grid, n);\r\n  let nextState = grid[i][j];\r\n  if (grid[i][j] === live) {\r\n    if (liveNeighbours < 2) {\r\n      //underpopulation\r\n      nextState = dead;\r\n    } else if (liveNeighbours === 2 || liveNeighbours === 3) {\r\n      //lives to next gen\r\n      nextState = live;\r\n    } else if (liveNeighbours > 3) {\r\n      //overpopulation\r\n      nextState = dead;\r\n    }\r\n  } else {\r\n    if (liveNeighbours === 3) {\r\n      //reproduction\r\n      nextState = live;\r\n    }\r\n  }\r\n  // nextState = liveNeighbours\r\n  return nextState;\r\n}\r\n\r\nfunction nextGen(n, grid) {\r\n  let nextGen = initialize2dArray(n);\r\n  let isSameAsPrevGen = true;\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n; j++) {\r\n      nextGen[i][j] = getNextState(i, j, n, grid);\r\n      if (isSameAsPrevGen && nextGen[i][j] !== grid[i][j]) {\r\n        isSameAsPrevGen = false;\r\n      }\r\n    }\r\n  }\r\n  return [nextGen, isSameAsPrevGen];\r\n}\r\n\r\nfunction fillPattern(noOfCells, pattern) {\r\n  let cells = initialize2dArray(noOfCells);\r\n  if (!pattern || pattern.rows > noOfCells || pattern.columns > noOfCells) {\r\n    return cells;\r\n  }\r\n  const gridCenter = [Math.floor(noOfCells / 2), Math.floor(noOfCells / 2)];\r\n  const patternCenter = [\r\n    Math.floor(pattern.rows / 2),\r\n    Math.floor(pattern.columns / 2),\r\n  ];\r\n  const [rowStart, colStart] = [\r\n    gridCenter[0] - patternCenter[0],\r\n    gridCenter[1] - patternCenter[1],\r\n  ];\r\n  // console.log(\"rowStart, colStart\", rowStart, colStart);\r\n  for (let i = 0, gridRowCtr = rowStart; i < pattern.rows; i++, gridRowCtr++) {\r\n    for (\r\n      let j = 0, gridColCtr = colStart;\r\n      j < pattern.columns;\r\n      j++, gridColCtr++\r\n    ) {\r\n      cells[gridRowCtr][gridColCtr] = pattern.data[i][j];\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction initialize2dArray(n) {\r\n  let a = new Array(n);\r\n  for (let i = 0; i < n; i++) {\r\n    a[i] = Array(n).fill(0);\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction getRandomInt(val) {\r\n  const rand = Math.random();\r\n  if (rand < parseFloat(val)) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n  // return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nmodule.exports = {\r\n  initialize2dArray,\r\n  nextGen,\r\n  fillPattern,\r\n  getRandomCell: getRandomInt,\r\n};\r\n","let compressPattern = (cells) => {\r\n  //remove all rows with only 0s(dead)\r\n  let compPattern = cells.filter((row) => row.indexOf(1) !== -1);\r\n  const leftMostNonEmptyCol = compPattern\r\n    .map((row) => row.indexOf(1))\r\n    .reduce(\r\n      (minIdx, curr) => (minIdx > curr ? curr : minIdx),\r\n      compPattern[0].length - 1\r\n    );\r\n  console.log(\"leftMostNonEmptyCol\", leftMostNonEmptyCol);\r\n  const rightMostNonEmptyCol = compPattern\r\n    .map((row) => row.lastIndexOf(1))\r\n    .reduce((maxIdx, curr) => (maxIdx < curr ? curr : maxIdx), 0);\r\n  console.log(\"rightMostNonEmptyCol\", rightMostNonEmptyCol);\r\n  //Set all values as undefined in columns containing only 0s(dead)\r\n  for (let j = 0; j < leftMostNonEmptyCol; j++) {\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      compPattern[i][j] = undefined;\r\n    }\r\n  }\r\n  for (let j = rightMostNonEmptyCol + 1; j < compPattern[0].length; j++) {\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      compPattern[i][j] = undefined;\r\n    }\r\n  }\r\n  console.table(compPattern);\r\n  /* for (let j = 0; j < compPattern[0].length; j++) {\r\n    let isOnlyZeroes = true;\r\n    for (let i = 0; i < compPattern.length; i++) {\r\n      if (compPattern[i][j] === 1) {\r\n        isOnlyZeroes = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isOnlyZeroes) {\r\n      for (let i = 0; i < compPattern.length; i++) {\r\n        compPattern[i][j] = undefined;\r\n      }\r\n    }\r\n  } */\r\n\r\n  compPattern = compPattern.map((row) =>\r\n    row.filter((cell) => cell === 0 || cell === 1)\r\n  );\r\n  console.table(compPattern);\r\n  return compPattern;\r\n};\r\n\r\nlet defaultPatternList = [\r\n  {\r\n    name: \"Glider\",\r\n    rows: 3,\r\n    columns: 3,\r\n    data: [\r\n      [0, 1, 0],\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n  },\r\n  {\r\n    name: \"Blinker\",\r\n    rows: 1,\r\n    columns: 3,\r\n    data: [[1, 1, 1]],\r\n  },\r\n  {\r\n    name: \"Beacon\",\r\n    rows: 4,\r\n    columns: 4,\r\n    data: [\r\n      [1, 1, 0, 0],\r\n      [1, 1, 0, 0],\r\n      [0, 0, 1, 1],\r\n      [0, 0, 1, 1],\r\n    ],\r\n  },\r\n];\r\n\r\nmodule.exports = {\r\n  defaultPatternList,\r\n  compressPattern,\r\n};\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nexport default function RandomPattern(props) {\r\n  const [value, setValue] = React.useState(50);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    props.randomPattern(value / 100);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography id=\"continuous-slider\" gutterBottom>\r\n        Probability({value}%) of live cell\r\n      </Typography>\r\n      <Slider\r\n        defaultValue={50}\r\n        value={value}\r\n        onChange={handleChange}\r\n        valueLabelDisplay=\"auto\"\r\n        // getAriaValueText={valuetext}\r\n        aria-labelledby=\"continuous-slider\"\r\n        min={0}\r\n        max={100}\r\n      />\r\n      <button style={{ float: \"left\" }} onClick={handleSubmit}>\r\n        Random pattern\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RandomPattern from \"./slider\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nconst { nextGen, fillPattern, getRandomCell } = require(\"./helper\");\r\nconst { defaultPatternList, compressPattern } = require(\"./defaultPatterns\");\r\n\r\nfunction Cell(props) {\r\n  return (\r\n    <td className={`cell ${props.className}`} onClick={props.onClick}>\r\n      {props.i},{props.j}\r\n    </td>\r\n  );\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    console.log(\"Grid contructor again\");\r\n    super(props);\r\n    /* this.state = {\r\n      cells: props.cells,\r\n    }; */\r\n  }\r\n\r\n  /* static getDerivedStateFromProps(props, state) {\r\n    // console.log(\"getDerivedStateFromProps\");\r\n    if (props.currentPattern !== state.currentPattern) {\r\n      return {\r\n        noOfCells: props.noOfCells,\r\n        currentPattern: props.currentPattern,\r\n        cells: props.cells,\r\n        toPlay: false,\r\n      };\r\n    }\r\n\r\n    // Return null to indicate no change to state.\r\n    return null;\r\n  } */\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"grid unmounted\");\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  renderCell(i, j) {\r\n    return (\r\n      <Cell\r\n        key={i * this.props.noOfCells + j}\r\n        value={this.props.cells[i][j]}\r\n        i={i}\r\n        j={j}\r\n        onClick={() => this.props.handleCellClick(i, j)}\r\n        className={this.props.cells[i][j] ? \"live\" : \"dead\"}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.props.toPlay) {\r\n      clearInterval(this.interval);\r\n      this.interval = setInterval(\r\n        () => this.props.upgradeGrid(),\r\n        this.props.interval * 1000\r\n      );\r\n    } else {\r\n      clearInterval(this.interval);\r\n    }\r\n    return (\r\n      <div>\r\n        Generation #{this.props.generation}\r\n        <table className=\"holder\">\r\n          <tbody>\r\n            {this.props.cells.map((row, i) => {\r\n              return (\r\n                <tr className=\"grid-row\" key={i}>\r\n                  {row.map((col, j) => this.renderCell(i, j))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let patternExamples = localStorage.getItem(\"patternList\");\r\n    if (patternExamples) {\r\n      patternExamples = JSON.parse(patternExamples);\r\n    } else {\r\n      patternExamples = defaultPatternList;\r\n      localStorage.setItem(\"patternList\", JSON.stringify(patternExamples));\r\n    }\r\n    this.state = {\r\n      noOfCells: 25,\r\n      currentPattern: null,\r\n    };\r\n    this.state = {\r\n      patternExamples,\r\n      currentPattern: null,\r\n      noOfCells: this.state.noOfCells,\r\n      cells: fillPattern(this.state.noOfCells, this.state.currentPattern),\r\n      toPlay: 0,\r\n      interval: 0.5,\r\n      generation: 0,\r\n    };\r\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\r\n    this.playOrPause = this.playOrPause.bind(this);\r\n    this.handleCellClick = this.handleCellClick.bind(this);\r\n    this.upgradeGrid = this.upgradeGrid.bind(this);\r\n    this.savePattern = this.savePattern.bind(this);\r\n    this.randomPattern = this.randomPattern.bind(this);\r\n    this.clearGrid = this.clearGrid.bind(this);\r\n  }\r\n\r\n  clearGrid() {\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells: fillPattern(state.noOfCells, null),\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  randomPattern(probOfLive) {\r\n    const cells = this.state.cells.slice();\r\n    for (let i = 0; i < cells.length; i++) {\r\n      for (let j = 0; j < cells[i].length; j++) {\r\n        cells[i][j] = getRandomCell(probOfLive);\r\n      }\r\n    }\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells,\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  savePattern(patternName) {\r\n    const cells = this.state.cells.slice();\r\n    let compPattern = compressPattern(cells);\r\n    const customPattern = {\r\n      name: patternName,\r\n      rows: compPattern.length,\r\n      columns: compPattern[0].length,\r\n      data: compPattern,\r\n    };\r\n    let patternList = JSON.parse(localStorage.getItem(\"patternList\"));\r\n    patternList.push(customPattern);\r\n    localStorage.setItem(\"patternList\", JSON.stringify(patternList));\r\n    this.setState((state) => ({\r\n      patternExamples: patternList,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells: state.cells,\r\n      toPlay: state.toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation,\r\n    }));\r\n  }\r\n\r\n  upgradeGrid() {\r\n    const [cells, isSameAsPrevGen] = nextGen(\r\n      this.state.noOfCells,\r\n      this.state.cells\r\n    );\r\n    let toPlay = this.state.toPlay;\r\n    if (isSameAsPrevGen) {\r\n      toPlay = false;\r\n    }\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells,\r\n      toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation + 1,\r\n    }));\r\n  }\r\n\r\n  handleCellClick(i, j) {\r\n    const cells = this.state.cells.slice();\r\n    cells[i][j] = 1 - cells[i][j];\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells,\r\n      toPlay: false,\r\n      interval: state.interval,\r\n      generation: 0,\r\n    }));\r\n  }\r\n\r\n  handleDropdownChange(event) {\r\n    const currentPattern = JSON.parse(\r\n      JSON.stringify(this.state.patternExamples[event.target.value])\r\n    );\r\n    this.setState({\r\n      patternExamples: this.state.patternExamples,\r\n      currentPattern,\r\n      noOfCells: this.state.noOfCells,\r\n      cells: fillPattern(this.state.noOfCells, currentPattern),\r\n      toPlay: false,\r\n      interval: this.state.interval,\r\n      generation: 0,\r\n    });\r\n  }\r\n\r\n  playOrPause(event) {\r\n    this.setState((state) => ({\r\n      patternExamples: state.patternExamples,\r\n      currentPattern: state.currentPattern,\r\n      noOfCells: state.noOfCells,\r\n      cells: state.cells,\r\n      toPlay: !state.toPlay,\r\n      interval: state.interval,\r\n      generation: state.generation,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"menu\">\r\n          <Load\r\n            handleDropdownChange={this.handleDropdownChange}\r\n            patternExamples={this.state.patternExamples}\r\n          />\r\n          <br />\r\n          <button style={{ float: \"left\" }} onClick={this.playOrPause}>\r\n            {this.state.toPlay ? \"Pause\" : \"Play\"}\r\n          </button>\r\n          <br />\r\n          <Save disabled={this.state.toPlay} onClick={this.savePattern} />\r\n          <br />\r\n          <RandomPattern randomPattern={this.randomPattern} />\r\n          <br />\r\n          <button onClick={this.clearGrid}>Clear grid</button>\r\n        </div>\r\n        <div className=\"game-grid\" style={{ float: \"right\" }}>\r\n          <Grid\r\n            currentPattern={this.state.currentPattern}\r\n            noOfCells={this.state.noOfCells}\r\n            cells={this.state.cells}\r\n            toPlay={this.state.toPlay}\r\n            handleCellClick={this.handleCellClick}\r\n            upgradeGrid={this.upgradeGrid}\r\n            interval={this.state.interval}\r\n            generation={this.state.generation}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Load extends React.Component {\r\n  render() {\r\n    return (\r\n      <label>\r\n        Select a pattern: <br />\r\n        <select defaultValue onChange={this.props.handleDropdownChange}>\r\n          <option disabled value>\r\n            Select pattern\r\n          </option>\r\n          {this.props.patternExamples.map((pattern, i) => (\r\n            <option key={i} value={i}>\r\n              {pattern.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nclass Save extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onClick(this.state.value);\r\n    this.setState({ value: '' });\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Save the current pattern:\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            placeholder=\"Pattern name\"\r\n            onChange={this.handleChange}\r\n            disabled={this.props.disabled}\r\n          />\r\n          <button disabled={this.props.disabled || !this.state.value}>\r\n            Save\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}